name: base-rails
type: template
description: Base pack for ruby on rails
frameworks: [rails]
dependencies:
- type: build
  package_name: ruby
- type: build
  package_name: ruby-bundler
- type: build
  package_name: ruby-dev
- type: build
  package_name: ruby-tzinfo
- type: build
  package_name: yaml-dev
- type: build
  package_name: libpq-dev
- type: runtime
  package_name: bash
- type: runtime
  package_name: curl
- type: runtime
  package_name: jq
- type: runtime
  package_name: ca-certificates
- type: runtime
  package_name: s6
- type: runtime
  main: true
  package_name: ruby
- type: runtime
  package_name: ruby-bundler
- type: runtime
  package_name: ruby-tzinfo
- type: runtime
  package_name: ruby-rdoc
- type: runtime
  package_name: libpq
sections:
- name: :build
  description: |
    We set the build destinations, this tells the system what to copy to the package.

    The build command tells the build system how to build your application. We're going for production build here so we're configuring bundler accordingly.
  attributes:
    destinations: [
      "*",
      ".bundle"
    ]
    command: |
      bundle config set deployment 'true'
      bundle config set without 'development test'

      bundle install

      bundle exec rails assets:precompile
- name: :run,
  description: |
    This section tells the build configuration how your application is run.

    We describe the commands and services available in the package.

    When the migrate command is run it will execute `rails db:migrate` and when the service starts it will call `rails server`
  attributes:
    name: "{{name}}"
    commands:
    - name: "migrate"
      binary: "rails"
      call: "db:migrate"
    services:
    - name: "web"
      binary: "rails"
      start:
        call: "server"
- name: :hook,
  description: |
    Hooks are commands that run at different stage of the package lifecycle.

    In this case we're running database migrations for your rails app after installation and upgrade.
  attributes: 
    post-install: |
      rc-update add {{name}}
      rc-service {{name}} migrate
    pre-upgrade: |
      rc-service {{name}} stop
    post-upgrade: |
      rc-service {{name}} migrate
      rc-service {{name}} start
    post-deinstall: |
      rc-service {{name}} stop
      rc-update del {{name}}
- name: :kit,
  description: |
    Web service kit will enable service on port 3000 and provision the database automatically for your application.

    The `generic/secret` driver will automatically generate secret with the length `128` character to be used as your `SECRET_KEY_BASE`
  attributes: 
    name: "web"
    description: "web service"
    main: true
    ports: [
      { name: "web", target: 3000, main: true }
    ]
    variables: [
      { key: "RAILS_ENV", default_value: "production" },
      { key: "RAILS_SERVE_STATIC_FILES", default_value: "1" },
      {
        key: "SECRET_KEY_BASE",
        driver: "generic/secret",
        driver_options: { 
          length: 128 
        }
      }
    ]